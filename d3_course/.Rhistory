dim(cnn_fds)
cnn_flw <- get_followers("cnn", n = 1000)  # everyone following cnn
stream_tweets(
"s8bm",
timeout = 60 * 60 * 24 * 7,
file_name = "tweetsabouts8bm.json",
parse = FALSE
)
getwd()
list.files()
file.remove("tweetsabouts8bm.json"   )
list.files()
latest <- search_tweets("s8bm", n = 500)
dim(latest)
latest <- get_timelines("s8bm", n = 500)
latest
latest <- get_timelines("cnn", n = 500)
dim(latest)
post_tweet("my first rtweet #rstats")
create_token(
app = "test_twitter_megaunique",
consumer_key = 'BfBoqDhpOq4t3c8ffNlAayxNN',
consumer_secret = 'RTpty5JVv038rL6VJVACzQ6jXgCM4G38UacJaLiDOpyNESHUq2',
access_token = '4105362689-TU74cdaseqHGAzeu9DX64SQ9W09EcTjVl5OVUiV',
access_secret = 'p6qWozZLyajoi2egjuoDJTZlDQcyqyRhInlxK9BU9W8KY',
set_renv = TRUE
)
?post_tweet
post_tweet("my first rtweet #rstats", token = token) # this would work if POST was allowed - have to be logged in maybe
token <- create_token(
app = "test_twitter_megaunique",
consumer_key = 'BfBoqDhpOq4t3c8ffNlAayxNN',
consumer_secret = 'RTpty5JVv038rL6VJVACzQ6jXgCM4G38UacJaLiDOpyNESHUq2',
access_token = '4105362689-TU74cdaseqHGAzeu9DX64SQ9W09EcTjVl5OVUiV',
access_secret = 'p6qWozZLyajoi2egjuoDJTZlDQcyqyRhInlxK9BU9W8KY',
set_renv = TRUE
)
post_tweet("my first rtweet #rstats", token = token) # this would work if POST was allowed - have to be logged in maybe
get_token()
get_token()
if (!requireNamespace("httpuv", quietly = TRUE)) {
install.packages("httpuv")
}
?create_token
token <- create_token(
app = "test_twitter_megaunique",
consumer_key = 'BfBoqDhpOq4t3c8ffNlAayxNN',
consumer_secret = 'RTpty5JVv038rL6VJVACzQ6jXgCM4G38UacJaLiDOpyNESHUq2')
token <- create_token(
app = "test_twitter_megaunique",
consumer_key = 'BfBoqDhpOq4t3c8ffNlAayxNN',
consumer_secret = 'RTpty5JVv038rL6VJVACzQ6jXgCM4G38UacJaLiDOpyNESHUq2')
token <- create_token(
app = "test_twitter_megaunique",
consumer_key = 'BfBoqDhpOq4t3c8ffNlAayxNN',
consumer_secret = 'RTpty5JVv038rL6VJVACzQ6jXgCM4G38UacJaLiDOpyNESHUq2',
access_token = '4105362689-TU74cdaseqHGAzeu9DX64SQ9W09EcTjVl5OVUiV',
access_secret = 'p6qWozZLyajoi2egjuoDJTZlDQcyqyRhInlxK9BU9W8KY')
token <- create_token(
app = "test_twitter_megaunique",
consumer_key = 'BfBoqDhpOq4t3c8ffNlAayxNN',
consumer_secret = 'RTpty5JVv038rL6VJVACzQ6jXgCM4G38UacJaLiDOpyNESHUq2',
access_token = '4105362689-TU74cdaseqHGAzeu9DX64SQ9W09EcTjVl5OVUiV',
access_secret = 'xxxx')
token
direct_messages(token = token)
?direct_messages
latest <- get_timelines("donald", n = 500)  # most recent tweets from cnn
dim(latest)
latest <- get_timelines("robertwiblin", n = 50)  # most recent tweets from cnn
dim(latest)
latest
names(latest)
?users_data
users_data(latest)
ts_plot(latest)
ggplot2::ts_plot(latest)
base::ts_plot(latest)
?ts_plot
rtweet::ts_plot(latest)
rtweet::ts_plot(latest) + # daily tweets
ggthemes::theme_fivethirtyeight()
latest <- get_timelines("s8mb", n = 50)  # most recent tweets
rtweet::ts_plot(latest) + # daily tweets
ggthemes::theme_fivethirtyeight()
latest
latest$created_at
class(latest$created_at)
class(latest$created_at) %>% day()
class(latest$created_at$wday)
latest$created_at$wday
as.POSIXlt(latest$created_at)$wday
as.POSIXlt(latest$created_at)
as.POSIXlt(latest$created_at) %>% select(wday)
as.POSIXlt(latest$created_at) %>% select(wday)
as.POSIXlt(latest$created_at)$wday
latest <- get_timelines("robertwiBlin", n = 100)  # most recent tweets
rtweet::ts_plot(latest) + # daily tweets
ggthemes::theme_fivethirtyeight()
latest <- get_timelines("robertwiblin", n = 100)  # most recent tweets
rtweet::ts_plot(latest) + # daily tweets
ggthemes::theme_fivethirtyeight()
as.POSIXlt(latest$created_at)$wday   # get day of week tweets occured
table(as.POSIXlt(latest$created_at)$wday  )
?get_timelines
their_tweets <- get_timelines("robertwiblin", n = 100, home = T)  # most recent tweets
names(their_tweets)
their_tweets$screen_name %>% table()
their_tweets <- get_timelines("s8mb", n = 100, home = T)  # gets tweets most recently appeared on
their_tweets$screen_name %>% table()
usrs <- search_users("#effectivealtruism", n = 1000)
usrs
names(usrs)
dim(usrs)
usrs$screen_name
usrs$screen_name
?search_users
latest <- get_timelines("robertwiblin", n = 3200)
# Use Nnet to predict Wiblin's tweets -------------------------------------
library(lubridate)
dim(latest)
names(latest)
x <- latest
latest$created_at[1:10]
d <- as.date(x$created_at)
d <- as.Date(x$created_at)
head(s)
head(d)
trend <- as.Date(x$created_at) %>% table()
trend
min_date <- min(trend)
min_date
trend
min_date <- min(names(trend))
min_date
x <- get_timelines("robertwiblin", n = 2500)
trend <- as.Date(x$created_at) %>% table()
min_date <- min(names(trend))
max_date <- max(names(trend))
class(min_date)
seq(as.Date(min_date), as.Date(max_date))
seq(as.Date(min_date), as.Date(max_date), by = 'day')
trend
df <- data.frame(names = names(trend), vals = trend)
head(df)
full_seq
full_seq <- data.frame(all_dates = seq(as.Date(min_date), as.Date(max_date), by = 'day'))
df <- data.frame(all_dates = names(trend), vals = trend)
full_seq %>% merge(df, by = 'all_dates', all.x = T)
str(full_join)
str(full_seq)
str(df)
df <- data.frame(all_dates = as.Date(names(trend)), vals = trend)
str(df)
df <- data.frame(all_dates = as.character(names(trend)), vals = trend)
str(df)
?data.frame
df <- data.frame(all_dates = names(trend), vals = trend, stringsAsFactors = F)
str(df)
full_seq %>% merge(df, by = 'all_dates', all.x = T)
df <- data.frame(all_dates = as.Date(names(trend)), vals = trend, stringsAsFactors = F)
str(df)
full_seq %>% merge(df, by = 'all_dates', all.x = T)
f <- full_seq %>% merge(df, by = 'all_dates', all.x = T)
full_seq %>% merge(df, by = 'all_dates', all.x = T)names
names(f)
f <- full_seq %>% merge(df, by = 'all_dates', all.x = T) %>%
select(0-als..)
f <- full_seq %>% merge(df, by = 'all_dates', all.x = T) %>%
select(-vals..)
names(f)
str(f)
?replace_na
full_seq %>% merge(df, by = 'all_dates', all.x = T) %>%
select(-vals..) %>%
replace_na(vals.Freq, 0)
library(tidyr)
full_seq %>% merge(df, by = 'all_dates', all.x = T) %>%
select(-vals..) %>%
replace_na(vals.Freq, 0)
full_seq %>% merge(df, by = 'all_dates', all.x = T) %>%
select(-vals..)
full_seq %>% merge(df, by = 'all_dates', all.x = T) %>%
select(-vals..) %>%
replace_na( 0)
full_seq %>% merge(df, by = 'all_dates', all.x = T) %>%
select(-vals..) %>%
replace_na(data = 'vals.Freq', replace =  0)
full_seq %>% merge(df, by = 'all_dates', all.x = T) %>%
select(-vals..) %>%
replace_na(list('vals.Freq' = 0))
full_seq <- data.frame(all_dates = seq(as.Date(min_date), as.Date(max_date), by = 'day'))
trend_df <- data.frame(all_dates = as.Date(names(trend)), vals = trend, stringsAsFactors = F)
full_seq <- full_seq %>% merge(trend_df, by = 'all_dates', all.x = T) %>%
select(-vals..) %>%
replace_na(list('vals.Freq' = 0))
str(full_seq)
plot(full_seq$vals.Freq)
install.packages("tensorflow")
library(tensorflow)
library(keras)
library(keras)
head(full_seq)
?keras_model_sequential
?
layer_conv_2d
?layer_conv_1d
?layer_max_pooling_1d
?layer_avg_pooling_1d
?layer_average_pooling_1d
?layer_flatten
install_keras(tensorflow = "gpu")
install_tensorflow(version = "1.1-gpu")
install.packages("CGE")
library(CGE)
install.packages("gEcon")
library(gEcon)
install.packages("gEcon", repos="http://R-Forge.R-project.org")
library(gEcon)
install.packages(‘nleqslv’ )
install.packages(‘nleqslv’)
install.packages("nleqslv")
install.packages("gEcon")
install.packages("gEcon", repos="http://R-Forge.R-project.org")
library(gEcon)
Example.MWG.15.B.1(
a = 0.1,
S0Exg = matrix(c(
1, 2,
2, 1
), 2, 2, TRUE)
)
matrix(c(
1, 2,
2, 1
), 2, 2, TRUE)
matrix(c(
1, 2,
2, 1
), 2, 2, TRUE)
?matrix
ex <- Example.MWG.15.B.1(
a = 0.1,    # Each consumer has the Cobb-Douglas utility function x1^a*x2^(1-a)
S0Exg = matrix(c(  # exogenous supply matrix
1, 2,
2, 1
), 2, 2, TRUE)
)
ex
class(x)
type(ex)
clas(ex)
class(ex)
ex <- Example.MWG.15.B.1(  # creates list
a = 0.2,    # Each consumer has the Cobb-Douglas utility function x1^a*x2^(1-a)
S0Exg = matrix(c(  # exogenous supply matrix
1, 2,
2, 1
), 2, 2, TRUE)
)
ex
ex <- Example.MWG.15.B.1(  # creates list
a = 0.0001,    # Each consumer has the Cobb-Douglas utility function x1^a*x2^(1-a)
S0Exg = matrix(c(  # exogenous supply matrix
1, 2,
2, 1
), 2, 2, TRUE)
)
ex
ex <- Example.MWG.15.B.1(  # creates list
a = 0.1,    # Each consumer has the Cobb-Douglas utility function x1^a*x2^(1-a)
S0Exg = matrix(c(  # exogenous supply matrix
1, 2,
2, 1
), 2, 2, TRUE)
)
ex
ge <- Example.MWG.15.B.1(  # creates list
a = 0.1,    # Each consumer has the Cobb-Douglas utility function x1^a*x2^(1-a)
S0Exg = matrix(c(  # exogenous supply matrix
1, 2,
2, 1
), 2, 2, TRUE)
)
ge$p / ge$p[1]
ge$p
?sdm
library(usethis)
usethis::create_package("playground")
usethis::create_package("playground")
library(jsonlite)
j <- fromJSON("https://amplify-wildrydes-dev-90718-deployment.s3.eu-west-2.amazonaws.com/camden_polys_noid.json")
class(j)
length(j)
j
names(j)
length(j['type'])
j['type'][1]
j <- fromJSON("https://amplify-wildrydes-dev-90718-deployment.s3.eu-west-2.amazonaws.com/camden_polys_noid.json")$features
length(j)
names(j)
length(j$type)
j$type[1]
j$properties[1]
length(
> j$properties)
length( j$properties)
data.frame(lsoa = j$properties[1])
length(j$geometry)
names(j$geometry)
length(j$geometry$coordinates)
geo_df <- data.frame(lsoa = j$properties[1], j$geometry$coordinates)
geo_df <- data.frame(lsoa = j$properties[1], geo = j$geometry$coordinates)
head(geo_df)
geo_df[1, 'geo'][1:5]
geo_df[1, 'geo']
geo_df[1, "geo"][1]
geo_df[1, "geo"]
names(geo_df)
dim(geo)
dim(geo_df)
geo_df <- data.frame("lsoa" = j$properties[1], "geo" = j$geometry$coordinates)
dim(geo_df)
geo_df <- list("lsoa" = j$properties[1], "geo" = j$geometry$coordinates)
length(geo_df)
length(geo_df["lsoa"])
geo_df["lsoa"][1]
j$properties[1]
j$properties[1][1]
j$properties[1][1][1]
j$properties[1] %>% class()
library(dplyr)
j$properties[1] %>% class()
vec(j$properties[1])
unlist(j$properties[1])
geo_df <- list("lsoa" = unlist(j$properties[1]), "geo" = j$geometry$coordinates)
geo_df$lsoa
geo_df$lsoa[1]
geo_df$geo[1][1][1]
length(geo_df$geo[1][1])
geo_df$geo[1][1]
geo_df$geo[1][1][1]
geo_df$geo[1][1][1][1]
length(geo_df$geo[1][1][1])
length(geo_df$geo[1])
geo_df$geo[1][1]
dim(geo_df$geo[1][1])
names(j)
j$geometry$coordinates[1][1]
j$geometry$coordinates[1][1] %>% unlist()
length(geo_df$geo[1][1][, 1])
geo_df$geo[1][1]
geo_df$geo[1][1] %>% class()
geo_df$geo[1][1] %>% as.data.frame()
get_lat_long <- function(vec) {
l <- length(vec)
output <- list()
output["lon"] <- vec[1:(l / 2)]
output["lat"] <- vec[(l + 1): l]
return(output)
}
get_lat_long(geo_df$geo[1][1])
geo_df$geo[1][1]
get_lat_long <- function(vec) {
vec <- unlist(vec)
l <- length(vec)
output <- list()
output["lon"] <- vec[1:(l / 2)]
output["lat"] <- vec[(l + 1): l]
return(output)
}
get_lat_long(geo_df$geo[1][1])
vec = geo_df$geo[1][1]
vec
vec <- unlist(vec)
l <- length(vec)
l
output <- list()
output["lon"] <- vec[1:(l / 2)]
l/2
vec[1:(l / 2)]
output["lon"]
output["lon"] <- vec[1:(l / 2)]
get_lat_long <- function(vec) {
vec <- unlist(vec)
l <- length(vec)
output <- list()
output[["lon"]] <- vec[1:(l / 2)]
output[["lat"]] <- vec[(l + 1): l]
return(output)
}
get_lat_long(geo_df$geo[1][1])
vec = geo_df$geo[1][1]
vec
vec <- unlist(vec)
l <- length(vec)
output <- list()
output[["lon"]] <- vec[1:(l / 2)]
output[["lat"]] <- vec[(l + 1): l]
output
(l + 1): l
get_lat_long <- function(vec) {
vec <- unlist(vec)
l <- length(vec)
output <- list()
output[["lon"]] <- vec[1:(l / 2)]
output[["lat"]] <- vec[((l / 2) + 1): l]
return(output)
}
get_lat_long(geo_df$geo[1][1])
lsoas <-  unlist(j$properties[1])
lsoas
names(j)
j$geometry %>% names()
j$geometry$coordinates %>% names()
j$geometry$coordinates %>% length()
j$geometry$coordinates[1]
i = 1
lon_lats <- get_lat_long(j$geometry$coordinates[i])
length(lon_lats)
temp_list <- list()
temp_list[["lsoa"]] <- lsoas[i]
lon_lats <- get_lat_long(j$geometry$coordinates[i])
temp_list[["lon"]] <- lon_lats[1]
temp_list[["lat"]] <- lon_lats[2]
out_list[[i]] <- temp_list
out_list <- list()
temp_list <- list()
temp_list[["lsoa"]] <- lsoas[i]
lon_lats <- get_lat_long(j$geometry$coordinates[i])
temp_list[["lon"]] <- lon_lats[1]
temp_list[["lat"]] <- lon_lats[2]
out_list[[i]] <- temp_list
outp_list
out_list
j <- fromJSON("https://amplify-wildrydes-dev-90718-deployment.s3.eu-west-2.amazonaws.com/camden_polys_noid.json")$features
lsoas <-unlist(j$properties[1])
get_lat_long <- function(vec) {
vec <- unlist(vec)
l <- length(vec)
output <- list()
output[["lon"]] <- vec[1:(l / 2)]
output[["lat"]] <- vec[((l / 2) + 1): l]
return(output)
}
out_list <- list()
for (i in 1:length(lsoas)) {
temp_list <- list()
temp_list[["lsoa"]] <- lsoas[i]
lon_lats <- get_lat_long(j$geometry$coordinates[i])
temp_list[["lon"]] <- lon_lats[1]
temp_list[["lat"]] <- lon_lats[2]
out_list[[i]] <- temp_list
}
getwd()
setwd("~/Desktop/front_end")
list.files()
setwd("~/Desktop/front_end/d3_course")
list.files()
cam <- fromJSON("camden_with_trends.json")
names(cam)
cam$features %>% names()
cam$features$fillval
cam$type
cam$features$type
cam$features$properties
runif(1, 1, 5)
runif(1, 1, 5)
runif(1, 1, 5)
runif(1, 1, 5)
runif(1, 1, 5)
?runif
round(runif(1, 1, 5))
a = c()
for (i in 1:1000) {}
a = vector(length = 1000)
a
?vector
a = vector(length = 1000, mode = "logical")
for (i in 1:1000) {a[i] = round(runif(1, 1, 5))}
a
hist(A)
hist(a)
runif(6, 1, 5)
### Gets json geo data, generates trends, and saves as R image
library(jsonlite)
j <- fromJSON("https://amplify-wildrydes-dev-90718-deployment.s3.eu-west-2.amazonaws.com/camden_polys_noid.json")$features
lsoas <-unlist(j$properties[1])
get_lat_long <- function(vec) {
vec <- unlist(vec)
l <- length(vec)
output <- list()
output[["lon"]] <- vec[1:(l / 2)]
output[["lat"]] <- vec[((l / 2) + 1): l]
return(output)
}
out_list <- list()
for (i in 1:length(lsoas)) {
temp_list <- list()
temp_list[["lsoa"]] <- lsoas[i]
lon_lats <- get_lat_long(j$geometry$coordinates[i])
temp_list[["lon"]] <- lon_lats[1]
temp_list[["lat"]] <- lon_lats[2]
temp_list[['fill_val']] <- round(runif(1, 1, 5))
temp_list[['trend']] <- runif(6, 1, 5)
out_list[[i]] <- temp_list
}
# save list
out_list[[1]]
getwd()
# save list
save.image("/Users/apple/Desktop/front_end/d3_course/camden_json.RData")
